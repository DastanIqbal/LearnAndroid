import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.dastanapps.buildflavours'
    compileSdk 34

    defaultConfig {
        applicationId "com.dastanapps.buildflavours"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    flavorDimensions "adsornot", "typeofapp"

    productFlavors {
        dev {
            applicationId "com.dastanapps.buildflavours.dev"
            ext.hasAds = true
            dimension "typeofapp"
        }

        prod {
            applicationId "com.dastanapps.buildflavours.prod"
            ext.hasAds = false
            dimension "typeofapp"
        }

        Ads {
            dimension "adsornot"
        }

        NoAds {
            dimension "adsornot"
        }
    }

//    sourceSets {
//        String withAdsDir = 'src/withAds'
//        String withoutAdsDir = 'src/withoutAds'
//
//        Ads {
//            java.srcDir withAdsDir + '/java'
//            res.srcDir withAdsDir + '/res'
//        }
//
//        NoAds {
//            java.srcDir withoutAdsDir + '/java'
//            res.srcDir withoutAdsDir + '/res'
//        }
//    }
}

dependencies {
//    println(getCurrentFlavor())
    def flavourDimension = getCurrentDimension()
    println(flavourDimension.get(0))
    println(flavourDimension.get(1))
    println(flavourDimension.get(2))

    writeInConfiguration("FLAVOUR","\""+flavourDimension.get(0)+"\"")
    writeInConfiguration("DIMENSION","\""+flavourDimension.get(1)+"\"")
    writeInConfiguration("CURRENT_FLAVOUR","\""+flavourDimension.get(2)+"\"")
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

//    println(tskReqStr)
    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return ""
    }
}

def getCurrentDimension() {
    def currFlavor = getCurrentFlavor()
    def fname = ""
    def fdimension = ""

    android.productFlavors.configureEach { flavor ->
        if(currFlavor.startsWith(flavor.name.toLowerCase())){
//            println("999999999999999999999")
//            println(flavor.name.toLowerCase())
//            println(flavor.dimension.toLowerCase())
//            println("999999999999999999999")
            println(flavor)
            fname = flavor.name.toLowerCase()
            fdimension = flavor.dimension.toLowerCase()
        }
    }

    return Tuple2.of(fname,fdimension,currFlavor)
}

static def writeInConfiguration(String name, String value){
    Properties properties = new Properties()
    properties.load(new FileInputStream("config.properties"))
//    String propertyValue = properties.getProperty(name)
    properties.setProperty(name, value)
    properties.store(new FileOutputStream("config.properties"), "Updated Configuration")
}