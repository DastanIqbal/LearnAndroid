package com.dastanapps.mediasdk.opengles.gpu.fbo;

import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.GLSurfaceView.Renderer;

import com.dastanapps.mediasdk.opengles.gpu.OpenGlUtils;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;


/***
 * Render To Texture (RTT)
 * ***********************
 * 1) Create FBO
 * 2) Generate POT Texture
 * 3) Render scene to FBO
 * 4) Render final scene with texture generated by FBO
 */


public class RTTRenderer implements Renderer {

    GLSurfaceView curView;
    FBORenderer fbor;
    int iProgId;
    int iPosition;
    int iTexCoords;
    int iTexLoc;


    int fboId = -1;


    FloatBuffer vertexBuffer;
    FloatBuffer texBuffer;

    int vwidth;
    int vheight;

    private float[] SQUARE = {
            -1.0f, -1.0f,
            1.0f, -1.0f,
            -1.0f, 1.0f,
            1.0f, 1.0f
    };
    public final float TEXTURE_NO_ROTATION[] = {
            0.0f, 1.0f,
            1.0f, 1.0f,
            0.0f, 0.0f,
            1.0f, 0.0f,
    };

    public RTTRenderer(GLSurfaceView view) {
        curView = view;

        fbor = new FBORenderer(view);
        vertexBuffer = ByteBuffer.allocateDirect(SQUARE.length * 4)
                .order(ByteOrder.nativeOrder())
                .asFloatBuffer();
        vertexBuffer.put(SQUARE).position(0);

        texBuffer = ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4)
                .order(ByteOrder.nativeOrder())
                .asFloatBuffer();
        texBuffer.put(TEXTURE_NO_ROTATION).position(0);
    }

    @Override
    public void onDrawFrame(GL10 arg0) {
        fbor.RenderToTexture();

        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
        GLES20.glUseProgram(iProgId);
        OpenGlUtils.checkGlError();
        vertexBuffer.position(0);
        GLES20.glVertexAttribPointer(iPosition, 2, GLES20.GL_FLOAT, false, 0, vertexBuffer);
        GLES20.glEnableVertexAttribArray(iPosition);
        OpenGlUtils.checkGlError();
        texBuffer.position(0);
        GLES20.glVertexAttribPointer(iTexCoords, 2, GLES20.GL_FLOAT, false, 0, texBuffer);
        GLES20.glEnableVertexAttribArray(iTexCoords);
        OpenGlUtils.checkGlError();
        if (fboId != -1) {
            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fboId);
            GLES20.glUniform1i(iTexLoc, 0);
            OpenGlUtils.checkGlError();
        }

//        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
//        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fboId);
//        GLES20.glUniform1i(iTexLoc, 1);
//        OpenGlUtils.checkGlError();

        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
        OpenGlUtils.checkGlError();

        GLES20.glDisableVertexAttribArray(iPosition);
        GLES20.glDisableVertexAttribArray(iTexCoords);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
        OpenGlUtils.checkGlError();
    }

    @Override
    public void onSurfaceChanged(GL10 gl, int width, int height) {

        vwidth = width;
        vheight = height;

        GLES20.glViewport(0, 0, width, height);
        GLES20.glUseProgram(iProgId);
        OpenGlUtils.checkGlError();
    }

    @Override
    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        GLES20.glClearColor(0, 0, 0, 1);

        fboId = fbor.InitiateFrameBuffer();

        String strVShader =
                "attribute vec4 a_position;" +
                        "attribute vec4 a_texCoords;" +

                        "varying vec2 v_texCoords;" +
                        "void main()" +
                        "{" +
                        "gl_Position = a_position;" +
                        "v_texCoords = a_texCoords.xy;" +
                        "}";

        String strFShader =
                "varying highp vec2 v_texCoords;" +
                        "uniform sampler2D u_texId;" +

                        "void main()" +
                        "{" +
                        "gl_FragColor = texture2D(u_texId, v_texCoords);" +
                        "}";

        iProgId = Utils.LoadProgram(strVShader, strFShader);
        iPosition = GLES20.glGetAttribLocation(iProgId, "a_position");
        OpenGlUtils.checkGlError();
        iTexCoords = GLES20.glGetAttribLocation(iProgId, "a_texCoords");
        OpenGlUtils.checkGlError();
        iTexLoc = GLES20.glGetUniformLocation(iProgId, "u_texId");
        OpenGlUtils.checkGlError();

        fbor.LoadShaders();

        // fboId = Utils.LoadTexture(curView, "thick_gold_frame.png");
        OpenGlUtils.checkGlError();
    }

}